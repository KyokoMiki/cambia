#[macro_use]
extern crate lazy_static;

pub mod handler;
pub mod extract;
pub mod parser;
pub mod translate;
pub mod integrity;
pub mod toc;
pub mod track;
pub mod util;
pub mod error;
pub mod evaluate;
pub mod response;
pub mod server;
pub mod drive;

use figlet_rs::FIGfont;
use clap::Parser;

use handler::parse_file;
use server::CambiaServer;

/// Program to parse log files generated by various CD ripping software
#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Path to the log file
    #[arg(short, long)]
    path: Option<String>,
    /// Enable server mode
    #[arg(short, long)]
    server: bool,
}

#[tokio::main]
async fn main() {
    let args = Args::parse();
    
    if args.path.is_some() {
        parse_file(&args.path.unwrap()[..]);
    } else {
        let font = FIGfont::standard().unwrap();
        println!("{}", font.convert("cambia").unwrap());
        CambiaServer::start().await;
    }
}
